// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: audit_log.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLogEntry = `-- name: CreateAuditLogEntry :one
INSERT INTO audit_log (table_name, record_id, action, user_email)
VALUES ($1, $2, $3, $4)
RETURNING id, table_name, record_id, action, user_email, timestamp
`

type CreateAuditLogEntryParams struct {
	TableName string      `json:"table_name"`
	RecordID  string      `json:"record_id"`
	Action    string      `json:"action"`
	UserEmail pgtype.Text `json:"user_email"`
}

func (q *Queries) CreateAuditLogEntry(ctx context.Context, arg CreateAuditLogEntryParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLogEntry,
		arg.TableName,
		arg.RecordID,
		arg.Action,
		arg.UserEmail,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.TableName,
		&i.RecordID,
		&i.Action,
		&i.UserEmail,
		&i.Timestamp,
	)
	return i, err
}

const deleteAuditLogEntry = `-- name: DeleteAuditLogEntry :exec
DELETE FROM audit_log
WHERE id = $1
`

func (q *Queries) DeleteAuditLogEntry(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuditLogEntry, id)
	return err
}

const getAuditLogEntryByID = `-- name: GetAuditLogEntryByID :one
SELECT id, table_name, record_id, action, user_email, timestamp 
FROM audit_log
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuditLogEntryByID(ctx context.Context, id int32) (AuditLog, error) {
	row := q.db.QueryRow(ctx, getAuditLogEntryByID, id)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.TableName,
		&i.RecordID,
		&i.Action,
		&i.UserEmail,
		&i.Timestamp,
	)
	return i, err
}

const listAuditLogsByUser = `-- name: ListAuditLogsByUser :many
SELECT id, table_name, record_id, action, user_email, timestamp 
FROM audit_log
WHERE user_email = $1
ORDER BY timestamp DESC
`

func (q *Queries) ListAuditLogsByUser(ctx context.Context, userEmail pgtype.Text) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByUser, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.UserEmail,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
