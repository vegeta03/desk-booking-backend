// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resource_status.sql

package db

import (
	"context"
)

const createResourceStatus = `-- name: CreateResourceStatus :one
INSERT INTO resource_status (status, description)
VALUES ($1, $2)
RETURNING status, description
`

type CreateResourceStatusParams struct {
	Status      string `json:"status"`
	Description string `json:"description"`
}

func (q *Queries) CreateResourceStatus(ctx context.Context, arg CreateResourceStatusParams) (ResourceStatus, error) {
	row := q.db.QueryRow(ctx, createResourceStatus, arg.Status, arg.Description)
	var i ResourceStatus
	err := row.Scan(&i.Status, &i.Description)
	return i, err
}

const deleteResourceStatus = `-- name: DeleteResourceStatus :exec
DELETE FROM resource_status
WHERE status = $1
`

func (q *Queries) DeleteResourceStatus(ctx context.Context, status string) error {
	_, err := q.db.Exec(ctx, deleteResourceStatus, status)
	return err
}

const getResourceStatus = `-- name: GetResourceStatus :one
SELECT status, description 
FROM resource_status
WHERE status = $1 LIMIT 1
`

func (q *Queries) GetResourceStatus(ctx context.Context, status string) (ResourceStatus, error) {
	row := q.db.QueryRow(ctx, getResourceStatus, status)
	var i ResourceStatus
	err := row.Scan(&i.Status, &i.Description)
	return i, err
}

const listResourceStatuses = `-- name: ListResourceStatuses :many
SELECT status, description 
FROM resource_status
ORDER BY status
`

func (q *Queries) ListResourceStatuses(ctx context.Context) ([]ResourceStatus, error) {
	rows, err := q.db.Query(ctx, listResourceStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceStatus
	for rows.Next() {
		var i ResourceStatus
		if err := rows.Scan(&i.Status, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResourceStatus = `-- name: UpdateResourceStatus :exec
UPDATE resource_status
SET description = $2
WHERE status = $1
`

type UpdateResourceStatusParams struct {
	Status      string `json:"status"`
	Description string `json:"description"`
}

func (q *Queries) UpdateResourceStatus(ctx context.Context, arg UpdateResourceStatusParams) error {
	_, err := q.db.Exec(ctx, updateResourceStatus, arg.Status, arg.Description)
	return err
}
