// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: building.sql

package db

import (
	"context"
)

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO buildings (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type CreateBuildingParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, createBuilding, arg.Name, arg.Description)
	var i Building
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteBuilding = `-- name: DeleteBuilding :exec
DELETE FROM buildings
WHERE id = $1
`

func (q *Queries) DeleteBuilding(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBuilding, id)
	return err
}

const getBuildingByID = `-- name: GetBuildingByID :one
SELECT id, name, description 
FROM buildings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBuildingByID(ctx context.Context, id int32) (Building, error) {
	row := q.db.QueryRow(ctx, getBuildingByID, id)
	var i Building
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listBuildings = `-- name: ListBuildings :many
SELECT id, name, description 
FROM buildings
ORDER BY name
`

func (q *Queries) ListBuildings(ctx context.Context) ([]Building, error) {
	rows, err := q.db.Query(ctx, listBuildings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Building
	for rows.Next() {
		var i Building
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuilding = `-- name: UpdateBuilding :exec
UPDATE buildings
SET name = $2, description = $3
WHERE id = $1
`

type UpdateBuildingParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateBuilding(ctx context.Context, arg UpdateBuildingParams) error {
	_, err := q.db.Exec(ctx, updateBuilding, arg.ID, arg.Name, arg.Description)
	return err
}
