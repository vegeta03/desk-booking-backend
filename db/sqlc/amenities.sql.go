// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: amenities.sql

package db

import (
	"context"
)

const createAmenity = `-- name: CreateAmenity :one
INSERT INTO amenities (id, name, description)
VALUES ($1, $2, $3)
RETURNING id, name, description
`

type CreateAmenityParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateAmenity(ctx context.Context, arg CreateAmenityParams) (Amenity, error) {
	row := q.db.QueryRow(ctx, createAmenity, arg.ID, arg.Name, arg.Description)
	var i Amenity
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteAmenity = `-- name: DeleteAmenity :exec
DELETE FROM amenities
WHERE id = $1
`

func (q *Queries) DeleteAmenity(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAmenity, id)
	return err
}

const getAmenityByID = `-- name: GetAmenityByID :one
SELECT id, name, description 
FROM amenities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAmenityByID(ctx context.Context, id string) (Amenity, error) {
	row := q.db.QueryRow(ctx, getAmenityByID, id)
	var i Amenity
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listAmenities = `-- name: ListAmenities :many
SELECT id, name, description 
FROM amenities
ORDER BY name
`

func (q *Queries) ListAmenities(ctx context.Context) ([]Amenity, error) {
	rows, err := q.db.Query(ctx, listAmenities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Amenity
	for rows.Next() {
		var i Amenity
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAmenity = `-- name: UpdateAmenity :exec
UPDATE amenities
SET name = $2, description = $3
WHERE id = $1
`

type UpdateAmenityParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateAmenity(ctx context.Context, arg UpdateAmenityParams) error {
	_, err := q.db.Exec(ctx, updateAmenity, arg.ID, arg.Name, arg.Description)
	return err
}
