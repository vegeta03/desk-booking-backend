// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role, description)
VALUES ($1, $2)
RETURNING role, description
`

type CreateRoleParams struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Role, arg.Description)
	var i Role
	err := row.Scan(&i.Role, &i.Description)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE role = $1
`

func (q *Queries) DeleteRole(ctx context.Context, role string) error {
	_, err := q.db.Exec(ctx, deleteRole, role)
	return err
}

const getRole = `-- name: GetRole :one
SELECT role, description 
FROM roles
WHERE role = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, role string) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, role)
	var i Role
	err := row.Scan(&i.Role, &i.Description)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role, description 
FROM roles
ORDER BY role
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.Role, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET description = $2
WHERE role = $1
`

type UpdateRoleParams struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.Role, arg.Description)
	return err
}
