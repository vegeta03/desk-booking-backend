// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: department.sql

package db

import (
	"context"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type CreateDepartmentParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment, arg.Name, arg.Description)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM departments
WHERE id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDepartment, id)
	return err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, name, description 
FROM departments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id int32) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
SELECT id, name, description 
FROM departments
ORDER BY name
`

func (q *Queries) ListDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :exec
UPDATE departments
SET name = $2, description = $3
WHERE id = $1
`

type UpdateDepartmentParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.Exec(ctx, updateDepartment, arg.ID, arg.Name, arg.Description)
	return err
}
