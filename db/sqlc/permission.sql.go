// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permission.sql

package db

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (permission, description)
VALUES ($1, $2)
RETURNING permission, description
`

type CreatePermissionParams struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, arg.Permission, arg.Description)
	var i Permission
	err := row.Scan(&i.Permission, &i.Description)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions
WHERE permission = $1
`

func (q *Queries) DeletePermission(ctx context.Context, permission string) error {
	_, err := q.db.Exec(ctx, deletePermission, permission)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT permission, description 
FROM permissions
WHERE permission = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, permission string) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, permission)
	var i Permission
	err := row.Scan(&i.Permission, &i.Description)
	return i, err
}

const listPermissions = `-- name: ListPermissions :many
SELECT permission, description 
FROM permissions
ORDER BY permission
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.Permission, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions
SET description = $2
WHERE permission = $1
`

type UpdatePermissionParams struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.Exec(ctx, updatePermission, arg.Permission, arg.Description)
	return err
}
