// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: employee.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (employee_id, department_id, team_id)
VALUES ($1, $2, $3)
RETURNING employee_id, department_id, team_id
`

type CreateEmployeeParams struct {
	EmployeeID   string      `json:"employee_id"`
	DepartmentID pgtype.Int4 `json:"department_id"`
	TeamID       pgtype.Int4 `json:"team_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee, arg.EmployeeID, arg.DepartmentID, arg.TeamID)
	var i Employee
	err := row.Scan(&i.EmployeeID, &i.DepartmentID, &i.TeamID)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE employee_id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, employeeID string) error {
	_, err := q.db.Exec(ctx, deleteEmployee, employeeID)
	return err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT employee_id, department_id, team_id 
FROM employees
WHERE employee_id = $1 LIMIT 1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, employeeID string) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, employeeID)
	var i Employee
	err := row.Scan(&i.EmployeeID, &i.DepartmentID, &i.TeamID)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT employee_id, department_id, team_id 
FROM employees
ORDER BY employee_id
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(&i.EmployeeID, &i.DepartmentID, &i.TeamID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET department_id = $2, team_id = $3
WHERE employee_id = $1
`

type UpdateEmployeeParams struct {
	EmployeeID   string      `json:"employee_id"`
	DepartmentID pgtype.Int4 `json:"department_id"`
	TeamID       pgtype.Int4 `json:"team_id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee, arg.EmployeeID, arg.DepartmentID, arg.TeamID)
	return err
}
