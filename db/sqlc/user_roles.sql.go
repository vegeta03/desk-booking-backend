// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_roles.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (user_email, role)
VALUES ($1, $2) 
RETURNING user_email, role
`

type CreateUserRoleParams struct {
	UserEmail string `json:"user_email"`
	Role      string `json:"role"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.Exec(ctx, createUserRole, arg.UserEmail, arg.Role)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles
WHERE user_email = $1 AND role = $2
`

type DeleteUserRoleParams struct {
	UserEmail string `json:"user_email"`
	Role      string `json:"role"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.Exec(ctx, deleteUserRole, arg.UserEmail, arg.Role)
	return err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT user_email, role 
FROM user_roles
WHERE user_email = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userEmail string) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.UserEmail, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
