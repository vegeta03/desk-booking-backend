// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (resource_id, employee_id, date, start_time, end_time, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, resource_id, employee_id, date, start_time, end_time, status
`

type CreateBookingParams struct {
	ResourceID pgtype.Int4        `json:"resource_id"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Date       pgtype.Date        `json:"date"`
	StartTime  pgtype.Timestamptz `json:"start_time"`
	EndTime    pgtype.Timestamptz `json:"end_time"`
	Status     pgtype.Text        `json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.ResourceID,
		arg.EmployeeID,
		arg.Date,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.EmployeeID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBooking, id)
	return err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id, resource_id, employee_id, date, start_time, end_time, status 
FROM bookings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookingByID(ctx context.Context, id int32) (Booking, error) {
	row := q.db.QueryRow(ctx, getBookingByID, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.EmployeeID,
		&i.Date,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
	)
	return i, err
}

const listBookingsByDate = `-- name: ListBookingsByDate :many
SELECT id, resource_id, employee_id, date, start_time, end_time, status 
FROM bookings
WHERE date = $1
ORDER BY start_time
`

func (q *Queries) ListBookingsByDate(ctx context.Context, date pgtype.Date) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookingsByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.EmployeeID,
			&i.Date,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE bookings
SET resource_id = $2, employee_id = $3, date = $4, start_time = $5, end_time = $6, status = $7
WHERE id = $1
`

type UpdateBookingParams struct {
	ID         int32              `json:"id"`
	ResourceID pgtype.Int4        `json:"resource_id"`
	EmployeeID pgtype.Text        `json:"employee_id"`
	Date       pgtype.Date        `json:"date"`
	StartTime  pgtype.Timestamptz `json:"start_time"`
	EndTime    pgtype.Timestamptz `json:"end_time"`
	Status     pgtype.Text        `json:"status"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) error {
	_, err := q.db.Exec(ctx, updateBooking,
		arg.ID,
		arg.ResourceID,
		arg.EmployeeID,
		arg.Date,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
	)
	return err
}
