// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resource.sql

package db

import (
	"context"
)

const createResource = `-- name: CreateResource :one
INSERT INTO resources (floor_id, zone_id, resource_type, identifier, capacity, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, floor_id, zone_id, resource_type, identifier, capacity, status
`

type CreateResourceParams struct {
	FloorID      int32  `json:"floor_id"`
	ZoneID       string `json:"zone_id"`
	ResourceType string `json:"resource_type"`
	Identifier   string `json:"identifier"`
	Capacity     int32  `json:"capacity"`
	Status       string `json:"status"`
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.FloorID,
		arg.ZoneID,
		arg.ResourceType,
		arg.Identifier,
		arg.Capacity,
		arg.Status,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.FloorID,
		&i.ZoneID,
		&i.ResourceType,
		&i.Identifier,
		&i.Capacity,
		&i.Status,
	)
	return i, err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resources
WHERE id = $1
`

func (q *Queries) DeleteResource(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteResource, id)
	return err
}

const getResourceByID = `-- name: GetResourceByID :one
SELECT id, floor_id, zone_id, resource_type, identifier, capacity, status 
FROM resources
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResourceByID(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRow(ctx, getResourceByID, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.FloorID,
		&i.ZoneID,
		&i.ResourceType,
		&i.Identifier,
		&i.Capacity,
		&i.Status,
	)
	return i, err
}

const listResourcesByZone = `-- name: ListResourcesByZone :many
SELECT id, floor_id, zone_id, resource_type, identifier, capacity, status 
FROM resources
WHERE zone_id = $1
ORDER BY identifier
`

func (q *Queries) ListResourcesByZone(ctx context.Context, zoneID string) ([]Resource, error) {
	rows, err := q.db.Query(ctx, listResourcesByZone, zoneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.FloorID,
			&i.ZoneID,
			&i.ResourceType,
			&i.Identifier,
			&i.Capacity,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResource = `-- name: UpdateResource :exec
UPDATE resources
SET floor_id = $2, zone_id = $3, resource_type = $4, identifier = $5, capacity = $6, status = $7
WHERE id = $1
`

type UpdateResourceParams struct {
	ID           int32  `json:"id"`
	FloorID      int32  `json:"floor_id"`
	ZoneID       string `json:"zone_id"`
	ResourceType string `json:"resource_type"`
	Identifier   string `json:"identifier"`
	Capacity     int32  `json:"capacity"`
	Status       string `json:"status"`
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) error {
	_, err := q.db.Exec(ctx, updateResource,
		arg.ID,
		arg.FloorID,
		arg.ZoneID,
		arg.ResourceType,
		arg.Identifier,
		arg.Capacity,
		arg.Status,
	)
	return err
}
