// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attendance.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendances (employee_id, booking_id, check_in_time, check_out_time, duration)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, employee_id, booking_id, check_in_time, check_out_time, duration
`

type CreateAttendanceParams struct {
	EmployeeID   pgtype.Text        `json:"employee_id"`
	BookingID    pgtype.Int4        `json:"booking_id"`
	CheckInTime  pgtype.Timestamptz `json:"check_in_time"`
	CheckOutTime pgtype.Timestamptz `json:"check_out_time"`
	Duration     pgtype.Time        `json:"duration"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, createAttendance,
		arg.EmployeeID,
		arg.BookingID,
		arg.CheckInTime,
		arg.CheckOutTime,
		arg.Duration,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.BookingID,
		&i.CheckInTime,
		&i.CheckOutTime,
		&i.Duration,
	)
	return i, err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM attendances
WHERE id = $1
`

func (q *Queries) DeleteAttendance(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAttendance, id)
	return err
}

const getAttendanceByID = `-- name: GetAttendanceByID :one
SELECT id, employee_id, booking_id, check_in_time, check_out_time, duration 
FROM attendances
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttendanceByID(ctx context.Context, id int32) (Attendance, error) {
	row := q.db.QueryRow(ctx, getAttendanceByID, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.BookingID,
		&i.CheckInTime,
		&i.CheckOutTime,
		&i.Duration,
	)
	return i, err
}

const listAttendancesByEmployee = `-- name: ListAttendancesByEmployee :many
SELECT id, employee_id, booking_id, check_in_time, check_out_time, duration 
FROM attendances
WHERE employee_id = $1
ORDER BY check_in_time
`

func (q *Queries) ListAttendancesByEmployee(ctx context.Context, employeeID pgtype.Text) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, listAttendancesByEmployee, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.BookingID,
			&i.CheckInTime,
			&i.CheckOutTime,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendance = `-- name: UpdateAttendance :exec
UPDATE attendances
SET employee_id = $2, booking_id = $3, check_in_time = $4, check_out_time = $5, duration = $6
WHERE id = $1
`

type UpdateAttendanceParams struct {
	ID           int32              `json:"id"`
	EmployeeID   pgtype.Text        `json:"employee_id"`
	BookingID    pgtype.Int4        `json:"booking_id"`
	CheckInTime  pgtype.Timestamptz `json:"check_in_time"`
	CheckOutTime pgtype.Timestamptz `json:"check_out_time"`
	Duration     pgtype.Time        `json:"duration"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) error {
	_, err := q.db.Exec(ctx, updateAttendance,
		arg.ID,
		arg.EmployeeID,
		arg.BookingID,
		arg.CheckInTime,
		arg.CheckOutTime,
		arg.Duration,
	)
	return err
}
