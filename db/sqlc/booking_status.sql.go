// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking_status.sql

package db

import (
	"context"
)

const createBookingStatus = `-- name: CreateBookingStatus :one
INSERT INTO booking_status (status, description)
VALUES ($1, $2)
RETURNING status, description
`

type CreateBookingStatusParams struct {
	Status      string `json:"status"`
	Description string `json:"description"`
}

func (q *Queries) CreateBookingStatus(ctx context.Context, arg CreateBookingStatusParams) (BookingStatus, error) {
	row := q.db.QueryRow(ctx, createBookingStatus, arg.Status, arg.Description)
	var i BookingStatus
	err := row.Scan(&i.Status, &i.Description)
	return i, err
}

const deleteBookingStatus = `-- name: DeleteBookingStatus :exec
DELETE FROM booking_status
WHERE status = $1
`

func (q *Queries) DeleteBookingStatus(ctx context.Context, status string) error {
	_, err := q.db.Exec(ctx, deleteBookingStatus, status)
	return err
}

const getBookingStatus = `-- name: GetBookingStatus :one
SELECT status, description 
FROM booking_status
WHERE status = $1 LIMIT 1
`

func (q *Queries) GetBookingStatus(ctx context.Context, status string) (BookingStatus, error) {
	row := q.db.QueryRow(ctx, getBookingStatus, status)
	var i BookingStatus
	err := row.Scan(&i.Status, &i.Description)
	return i, err
}

const listBookingStatuses = `-- name: ListBookingStatuses :many
SELECT status, description 
FROM booking_status
ORDER BY status
`

func (q *Queries) ListBookingStatuses(ctx context.Context) ([]BookingStatus, error) {
	rows, err := q.db.Query(ctx, listBookingStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingStatus
	for rows.Next() {
		var i BookingStatus
		if err := rows.Scan(&i.Status, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingStatus = `-- name: UpdateBookingStatus :exec
UPDATE booking_status
SET description = $2
WHERE status = $1
`

type UpdateBookingStatusParams struct {
	Status      string `json:"status"`
	Description string `json:"description"`
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) error {
	_, err := q.db.Exec(ctx, updateBookingStatus, arg.Status, arg.Description)
	return err
}
