// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resource_amenities.sql

package db

import (
	"context"
)

const createResourceAmenity = `-- name: CreateResourceAmenity :exec
INSERT INTO resource_amenities (resource_id, amenity_id)
VALUES ($1, $2) 
RETURNING resource_id, amenity_id
`

type CreateResourceAmenityParams struct {
	ResourceID int32  `json:"resource_id"`
	AmenityID  string `json:"amenity_id"`
}

func (q *Queries) CreateResourceAmenity(ctx context.Context, arg CreateResourceAmenityParams) error {
	_, err := q.db.Exec(ctx, createResourceAmenity, arg.ResourceID, arg.AmenityID)
	return err
}

const deleteResourceAmenity = `-- name: DeleteResourceAmenity :exec
DELETE FROM resource_amenities
WHERE resource_id = $1 AND amenity_id = $2
`

type DeleteResourceAmenityParams struct {
	ResourceID int32  `json:"resource_id"`
	AmenityID  string `json:"amenity_id"`
}

func (q *Queries) DeleteResourceAmenity(ctx context.Context, arg DeleteResourceAmenityParams) error {
	_, err := q.db.Exec(ctx, deleteResourceAmenity, arg.ResourceID, arg.AmenityID)
	return err
}

const getResourceAmenitiesByResource = `-- name: GetResourceAmenitiesByResource :many
SELECT resource_id, amenity_id 
FROM resource_amenities
WHERE resource_id = $1
`

func (q *Queries) GetResourceAmenitiesByResource(ctx context.Context, resourceID int32) ([]ResourceAmenity, error) {
	rows, err := q.db.Query(ctx, getResourceAmenitiesByResource, resourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceAmenity
	for rows.Next() {
		var i ResourceAmenity
		if err := rows.Scan(&i.ResourceID, &i.AmenityID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
