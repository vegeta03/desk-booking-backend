// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, employee_id)
VALUES ($1, $2, $3)
RETURNING email, name, employee_id
`

type CreateUserParams struct {
	Email      string      `json:"email"`
	Name       string      `json:"name"`
	EmployeeID pgtype.Text `json:"employee_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Name, arg.EmployeeID)
	var i User
	err := row.Scan(&i.Email, &i.Name, &i.EmployeeID)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteUser, email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, name, employee_id 
FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.Email, &i.Name, &i.EmployeeID)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT email, name, employee_id 
FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Email, &i.Name, &i.EmployeeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, employee_id = $3
WHERE email = $1
`

type UpdateUserParams struct {
	Email      string      `json:"email"`
	Name       string      `json:"name"`
	EmployeeID pgtype.Text `json:"employee_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Email, arg.Name, arg.EmployeeID)
	return err
}
